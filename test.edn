(def fn-0 (fn [] (println "No args call!")))
(if true (println "Hello\nWorld!"))
(if nil
  (println "you don't see me")
  (println (prn-str (quote (println "I'm quoted!")))))
(let [blarg println
      println quote
      fn-1 (fn [arg]
               (blarg "Passed argument: " (prn-str arg))
               arg)]
     (blarg (println (let works !)))
     (fn-0)
     (fn-1 "Just passing by."))
; a comment
((fn [do if quote let fn]
     (println do if quote let fn))
  1 2 3 4 5)
(def multi
  (fn ([] (println "Nothing to see."))
      ([x] (println "Something to see: " x))))
(multi)
(multi "FooBar!")
(println (#{:test} :test))
(println ({:key :value} :key))
(println (:key {:key :value}))

(do (def a 1)
    (def b 2))

[:list (list a b)]
[:vector (vector a b)]
[:vector-literal [a b]]
[:set (hash-set a b)]
[:set-literal #{a b}]
[:map (hash-map :a a :b b)]
[:map-literal {:a a :b b}]

;; testing varargs functions

; one-arg
(def va-1 (fn [& args] [args]))
(va-1)
(va-1 1)
(va-1 1 2)
(va-1 1 2 3)
(va-1 1 2 3 4)
(va-1 1 2 3 4 5)

; two-arg
(def va-2 (fn [a & args] [a args]))
(va-2)
(va-2 1)
(va-2 1 2)
(va-2 1 2 3)
(va-2 1 2 3 4)
(va-2 1 2 3 4 5)

; three-arg
(def va-3 (fn [a b & args] [a b args]))
(va-3)
(va-3 1)
(va-3 1 2)
(va-3 1 2 3)
(va-3 1 2 3 4)
(va-3 1 2 3 4 5)

(seq #{1 2})
(seq {:a 1 :b 2})
(seq nil)

(first '(1 2 3))
(first [1 2 3])
(first #{1 2 3})
(first {:a 1 :b 2 :c 3})
(first nil)
(first [])

(next '(1 2 3))
(next [1 2 3])
(next #{1 2 3})
(next {:a 1 :b 2 :c 3})
(next nil)
(next [])

(rest '(1 2 3))
(rest [1 2 3])
(rest #{1 2 3})
(rest {:a 1 :b 2 :c 3})
(rest nil)
(rest [])

(eval 'a)
(def q '(first [(println a b) :fail]))
(eval q)
(println "asd" nil"test")

(apply + [1])
(apply + 1 [2])
(apply + 1 2 [3])
(apply vector 1 2 3 4 5 '(6 7 8 9 10))

(+)
(+ 2)
(+ 3 7)
(+ 3 7 5.0 1)
(+ 3.5 7)

(-)
(- 2)
(- -3.5)
(- 4 3)
(- 5 2.0 1)
(- 0 0.25)

(*)
(* 2)
(* 3 7)
(* 3 7 5.0 1)
(* 3.5 7)

(/)
(/ 4)
(/ 6 3 2)
(/ 12 3 2.0)
(/ 5 2)
(/ 1 0)

(symbol "test")
(keyword 'test)
(name 'bruno)
(name :what)

'#'my-var
(def my-var :value)
(var my-var)