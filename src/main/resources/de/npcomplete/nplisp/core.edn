;; core library functions

(defmacro defn [name & fn-declaration]
  (cons 'def
    (list name
      (apply list 'fn name fn-declaration))))


(defn concat
  ([] '())
  ([x] x)
  ([x y]
    (let [s (seq x)]
      (if s
        (cons (first s) (concat (rest s) y))
        (seq y)))))


(defmacro and
  ([] true)
  ([x] x)
  ([x & next]
   (list 'if x
     (cons 'and next)
     x)))


(defmacro or
  ([] nil)
  ([x] x)
  ([x & next]
   (list 'if x
     x
     (cons 'and next))))
