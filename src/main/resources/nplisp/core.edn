(ns nplisp.core
  ;; TODO: def all core functions (and add docstrings)

  ;; redefine 'def' with itself to add a docstring
  (def def
    "Creates and interns or locates a global var with the
    name of symbol and a namespace of the value of the current namespace (*ns*)."
    def)

  ;; implemented as a special cases in de.npcomplete.nplisp.Lisp#lookup
  (def eval)
  (def *ns*)


  (def decode-defn-args
    (fn [args]
      (let [arg (first args)
            flags (if (vector? arg) arg)
            args (if flags (next args) args)
            name (first args)
            args (next args)
            arg (first args)
            docstring (if (string? arg) arg)
            specs (if docstring (next args) args)]
        {:flags flags
         :name  name
         :doc   docstring
         :specs specs})))


  (def [:macro] defn
    "Same as (def name (fn [params*] exprs*))
    or (def name (fn ([params* ] exprs*)+))
    with any doc-string or tags."
    (fn [& args]
      (let [fn-map (decode-defn-args args)
            flags (apply vector (:flags fn-map))
            name (:name fn-map)
            doc (:doc fn-map)
            doc (if doc doc "")
            specs (:specs fn-map)]
        (list 'nplisp.core/def flags name doc
          (apply list 'nplisp.core/fn name specs)))))


  (defn [:macro] defmacro
    ;; identical to defn, but sets the :macro flag on the defined var
    [& args]
    (let [fn-map (decode-defn-args args)
          flags (apply vector :macro (:flags fn-map))
          name (:name fn-map)
          doc (:doc fn-map)
          doc (if doc doc "")
          specs (:specs fn-map)]
      (apply list 'nplisp.core/defn flags name doc specs)))


  (defmacro declare
    [name]
    (list 'nplisp.core/def name))

  ;; LOGIC FUNCTIONS AND MACROS

  (defn not [x]
    (if x false true))


  (defmacro and
    ([] true)
    ([x] x)
    ([x & next]
     (list 'nplisp.core/if x
       (cons 'nplisp.core/and next)
       x)))


  (defmacro or
    ([] nil)
    ([x] x)
    ([x & next]
     (list 'nplisp.core/if x
       x
       (cons 'nplisp.core/or next))))


  ;; COMPARISONS

  (defn =
    ([x] true)
    ([x y] (equals x y))
    ([x y & more]
     (if (equals x y)
       (if (next more)
         (recur y (first more) (next more))
         (equals y (first more)))
       false)))


  ;; CONDITIONALS

  (defmacro if-not
    ([test then]
     (list 'nplisp.core/if test nil then))
    ([test then else]
     (list 'nplisp.core/if test else then)))


  (defmacro when
    [test & body]
    (list 'nplisp.core/if test (cons 'nplisp.core/do body)))


  (defmacro when-not
    [test & body]
    (list 'nplisp.core/if test nil (cons 'nplisp.core/do body)))


  (defmacro cond
    [& clauses]
    (if clauses
      (list 'nplisp.core/if (first clauses)
        (first (next clauses))
        (cons 'nplisp.core/cond (next (next clauses))))))


  ;; DATA STRUCTURE MANIPULATION

  (defn concat
    ([] '())
    ([x] x)
    ([x y]
     (concat* x y))
    ([x y & zs]
     (apply concat (concat* x y) zs)))


  (defn sequence
    [coll]
    (if (seq? coll)
      coll
      (or (seq coll) ())))


  ;; everything available for syntax quote now

  (def syntax-quote)

  )